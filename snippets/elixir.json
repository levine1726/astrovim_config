{
  "Create Table (Ecto)": {
    "prefix": [
      "ct",
      "create_table"
    ],
    "body": [
      "create table(:${1:name}) do",
      "  timestamps()",
      "end"
    ],
    "description": "creates a table using the ecto DSL"
  },
  "New Ecto Schema File": {
    "prefix": [
      "schema"
    ],
    "body": [
      "defmodule ${1:Module} do",
      "  use Ecto.Schema",
      "  import Ecto.Changeset",
      "",
      "  schema \"${2:table_name}\" do",
      "",
      "    timestamps()",
      "  end",
      "",
      "  @doc false",
      "  def changeset(struct, attrs) do",
      "    struct",
      "    |> cast(attrs, [])",
      "  end",
      "end"
    ],
    "description": "adds a new schema file for a table"
  },
  "Add Column (Ecto)": {
    "prefix": [
      "ac",
      "add-column"
    ],
    "body": [
      "add(:${1:column_name}, :${2:data_type})"
    ],
    "description": "adds a new column using the ecto DSL"
  },
  "Add Column with Table Reference (Ecto)": {
    "prefix": [
      "acr",
      "add-column-with-table-reference"
    ],
    "body": [
      "add(:${1:column_name}_id, references(:${1:column_name}s, on_delete: :nothing))"
    ],
    "description": "adds a new column id with a reference to another table using the ecto DSL"
  },
  "Insert Into": {
    "prefix": [
      "insert_into"
    ],
    "body": [
      "execute(\"\"\"",
      "  INSERT INTO ${1:table_name} (${2:field}, inserted_at, updated_at)",
      "  VALUES",
      "  (${0:value}, (now() at time zone 'utc'), (now() at time zone 'utc'));",
      "\"\"\")"
    ],
    "description": "creates a table using the ecto DSL"
  },
  "Alter Table (Ecto)": {
    "prefix": [
      "alter_table"
    ],
    "body": [
      "alter table(:${1:name}) do",
      "end"
    ],
    "description": "alters a table using the ecto DSL"
  }
}
